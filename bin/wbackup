#!/usr/bin/env ruby

require 'rubygems'
require 'open3'
require 'optparse'
require 'ostruct'
require 'colorize'
require 'fileutils'
require 'yaml'
require 'timeout'
require 'pp'

# If this is a symlink, go and get the working directory through it:

root_dir = File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__

require_relative File.join(root_dir,'..','..','lib','functions.rb')


################################################################################
#
# Command parser configuration
#

class OptparseWbackup

  # Return a structure describing the options.
  #
  def self.parse(args)
    # The options specified on the command line will be collected in *options*.
    # We set default values here.
    options = OpenStruct.new
    options.description = ""
    options.verbose = false
    options.debug = false
    options.quiet = false
    options.skipdb = false
    options.skipfiles = false
    options.all = false

    opt_parser = OptionParser.new do |opts|

      opts.banner = "Usage: #{$0} [options] label"

      opts.separator ""
      opts.separator "Specific options:"

      #Description
      opts.on("-A", "--all", "Backup all the sites") do
        options.all = true
      end

      #Description
      opts.on("-m", "--mirror", "Mirror data to second storage") do
        options.mirror = true
      end

      #Description
      opts.on("-D", "--description DESC", 
              "Backup description text") do |d|
        options.description = d
      end

      # sync db
      opts.on("-s", "--skipdb", "Do not backup database") do
        options.skipdb = true
      end

      # sync db
      opts.on("-f", "--skipfiles", "Do not backup files") do
        options.skipfiles = true
      end

      #verbose
      opts.on("-v", "--verbose", "Verbose output") do
        options.verbose = true
      end

      #quiet
      opts.on("-q", "--quiet", "Run quiet mode") do
        options.quiet = true
      end

      # Debug the script
      opts.on("-d", "--debug", "Debug the script internals") do
        options.debug = true
      end

      opts.separator ""
      opts.separator "Common options:"

      # No argument, shows at tail.  This will print an options summary.
      # Try it and see!
      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end

      # Another typical switch to print the version.
      opts.on_tail("--version", "Show version") do
        puts OptionParser::Version.join('.')
        exit
      end


    end


    opt_parser.parse!(args)

    if args.size < 1 and not options.all and not options.mirror
      puts opt_parser
      exit
    end

    options
  end  # parse()

end  # class OptparseExample

################################################################################
#
# Parse options and verify src and dst
#

begin
  options = OptparseWbackup.parse(ARGV)
rescue => e
  puts "wbackup error: #{e}".red
  exit 1
end

label = ARGV.shift if not options.all

if options.debug 
  puts "DEBUG: label = #{label}"
end


################################################################################
#
# Default exec options
#

EXEC_TIMEOUT = 600

exec_opts = {
  :stderr => true, 
  :stdout => options.verbose, 
  :exit_on_error => true, 
  :timeout => EXEC_TIMEOUT
}

################################################################################
#
# Load configuration file
#

config = load_config_file

if options.debug 
  puts "DEBUG: config array:"
  pp config
end

################################################################################
#
# Handle special case of backing up all the sites:
#


if options.all

  puts "INFO: Backing up all the sites:" unless options.quiet


  backup_all_sites = config[:websites].select {|site| site if site[:backup_all] == true }

  backup_all_sites.each do |site|
    site_label = site[:label]
    command = "wbackup "
    command += "-q " if options.quiet
    command += "-v " if options.verbose
    command += "-d " if options.debug
    command += "#{site_label}"

    unless options.quiet
      print "\n"
      msg = "Site: #{site[:url]} (#{site_label})"
      puts msg
      (msg.size).times { print '-' }
      print "\n"
    end

    myexec command, { 
      :stderr => true, 
      :stdout => true, 
      :exit_on_error => true, 
      :timeout => EXEC_TIMEOUT
    }

  end

end


################################################################################
#
# Start single lable backup:
#

if label != nil

  site = config[:websites].find { |c| label == c[:label] }

  if options.debug
    puts "DEBUG site config:"
    pp site
  end

  if site.nil?
    $stderr.puts "wbackup error: Could not find #{label} in config file".red
    exit 1
  end

  ################################################################################
  #
  # Verify connectivity
  #

  puts "INFO: Verifying connectivity: " if options.verbose
  myexec "ssh #{config[:user]}@#{site[:site_host]} hostname", exec_opts

  ################################################################################
  #
  # Backup dir:
  #

  # Set variables
  backup_dir = File.join(config[:backup][:storage],site[:url])
  test_file = File.join(backup_dir,'.test')

  pp "DEBUG: backupdir = #{backup_dir}" if options.debug

  # Verify backup dir:

  begin
    FileUtils.mkdir_p(backup_dir) if not File.exists?(backup_dir)
    FileUtils.touch(test_file) 
    FileUtils.rm(test_file) 
  rescue => e
    puts "wbackup error: Something wrong happened when trying to use #{backup_dir}".red
    puts "Error was: #{e}".red
    exit 1
  end

  ################################################################################
  #
  # Get the tags and calculate the new tag number
  #

  tags = Dir[File.join(backup_dir,'*')].map { |x| x.split('/').last.to_i }
  new_tag = tags.empty? ? 0 : tags.sort.last + 1

  if options.debug
    pp "DEBUG: Current tags: #{tags}"
    pp "DEBUG: New tag:#{new_tag}"
  end

  ################################################################################
  #
  # Create the new tag folder and verify contents for previous backup
  # to perform a link copy:
  #


  data_dir =  File.join(backup_dir,new_tag.to_s,'data')
  db_dir =  File.join(backup_dir,new_tag.to_s,'db')
  md_dir = File.join(backup_dir,new_tag.to_s)

  FileUtils.mkdir_p db_dir
  pp "DEBUG: data_dir : #{data_dir}" if options.debug
  pp "DEBUG: db_dir : #{db_dir}" if options.debug

  if new_tag > 0

    prev_tag = new_tag - 1
    prev_data_dir = File.join(backup_dir,prev_tag.to_s,'data')

    pp "DEBUG: Prev tag: #{prev_tag}" if options.debug

    if not options.skipfiles

      # If it is incremental but the data dir doesn't exist
      if not File.exists? prev_data_dir 
        puts "warning: previous tag data dir does not exists, continue with full backup".yellow if not options.quiet
        FileUtils.mkdir_p data_dir
      else
        myexec "cp -al #{prev_data_dir} #{data_dir}", exec_opts
      end

    end

    # If it is tag 0 just create the data_dir
  else
    FileUtils.mkdir_p data_dir
  end

  ################################################################################
  #
  # Rsync content 
  # 

  if not options.skipfiles
    bkp_files = "/usr/bin/rsync "
    bkp_files += "--archive "
    bkp_files += "--delete "
    bkp_files += "--verbose " if options.verbose
    bkp_files += "--quiet " if options.quiet
    bkp_files += "#{config[:user]}@#{site[:site_host]}:#{site[:site_path]}/ "
    bkp_files += "#{data_dir} "

    puts "DEBUG: #{bkp_files}" if options.debug

    print "Backing up files: " if not options.quiet
    myexec bkp_files, exec_opts
    puts "OK".green if not options.quiet and not options.verbose 
  end

  ################################################################################
  #
  # Database:
  # 

  options.skipdb = true if site[:mysql_db].nil? 

  if not options.skipdb

    # variables
    bkp_db = "ssh " 
    bkp_db += "#{config[:user]}@#{site[:mysql_host]} " 
    bkp_db += "'/usr/bin/mysqldump -u#{site[:mysql_user]} -p#{site[:mysql_pass]} #{site[:mysql_db]}' > #{db_dir}/dbdump.sql"

    # debug
    puts "DEBUG: #{bkp_db}" if options.debug

    print "Backing up DB: " if not options.quiet

    myexec bkp_db, exec_opts
    zip_db = "gzip #{db_dir}/dbdump.sql"
    myexec zip_db, exec_opts

    puts "OK".green if not options.quiet
  end

  ################################################################################
  #
  # Print metadata:
  # 

  metadata = {
    label: site[:label],
    url: site[:url],
    description: options.description,
    date:        Time.now,
    skip_db:     options.skipdb,
    tag:         new_tag,
  }

  begin 
    md_file = File.join(md_dir,'metadata.yaml')
    File.open(md_file,'w') do |f|
      f.write metadata.to_yaml
    end
  rescue => e
    puts "wbackup error: Something wrong happened when trying to write on #{md_file}".red
    puts "Error was: #{e}".red
  end

end

################################################################################
#
# Mirroring:
# 

if config[:backup][:mirror] != nil and options.mirror

  # Create dir if it doesn't exist:
  FileUtils.mkdir_p config[:backup][:mirror] if not File.exist? config[:backup][:mirror]

  # variables
  mirror_cmd = "rsync -aH " 
  mirror_cmd += "#{config[:backup][:storage]} " 
  mirror_cmd += "#{config[:backup][:mirror]} " 

  # debug
  puts "DEBUG: #{mirror_cmd}" if options.debug

  print "Mirroring storage " if not options.quiet
  myexec mirror_cmd, exec_opts
  puts "OK".green if not options.quiet

end




