#!/usr/bin/env ruby

require 'rubygems'
require 'open3'
require 'optparse'
require 'ostruct'
require 'colorize'
require 'fileutils'
require 'yaml'
require 'terminal-table'
require 'pp'
require_relative File.join(File.dirname(__FILE__),'..','lib','functions.rb')

################################################################################
#
# Global Variables
#
EXEC_TIMEOUT = 600

################################################################################
#
# Command parser configuration
#

class OptparseWsync

  # Return a structure describing the options.
  #
  def self.parse(args)
    # The options specified on the command line will be collected in *options*.
    # We set default values here.
    options = OpenStruct.new

    options.list = false
    options.backup = false
    options.label = '.+'

    options.verbose = false
    options.debug = false

    opt_parser = OptionParser.new do |opts|

      opts.banner = "Usage: #{$0} [options] src dst"

      opts.separator ""
      opts.separator "Specific options:"

      # Filter label
      opts.on("-F", "--filter-label LABEL", "Filter by label, used with -b ") do |label|
        options.label = label
      end

      # List alal the labels
      opts.on("-l", "--list", "List all available sites and labels") do 
        options.list = true
      end

      # List all available backups
      opts.on("-b", "--backups", "List all available backups") do 
        options.backups = true
      end

      opts.separator ""

      #verbose
      opts.on("-v", "--verbose", "Verbose output") do
        options.verbose = true
      end

      #verbose
      opts.on("-q", "--quiet", "Run quiet mode") do
        options.quiet = true
      end

      # Debug the script
      opts.on("-d", "--debug", "Debug the script internals") do
        options.debug = true
      end

      opts.separator ""
      opts.separator "Common options:"

      # No argument, shows at tail.  This will print an options summary.
      # Try it and see!
      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end

      # Another typical switch to print the version.
      opts.on_tail("--version", "Show version") do
        puts OptionParser::Version.join('.')
        exit
      end


    end


    opt_parser.parse!(args)

    if options.backups and args.size > 0
      puts opt_parser
      exit
    end

    if options.list and args.size > 0
      puts opt_parser
      exit
    end

    if not options.list and not options.backups and args.size == 0
      puts opt_parser
      exit
    end

    options
  end  # parse()

end  # class OptparseExample


################################################################################
#
# Parse options and verify src and dst
#

begin
  options = OptparseWsync.parse(ARGV)
rescue => e
  puts "wsync error: #{e}".red
  exit 1
end

################################################################################
#
# Load configuration file
#

config = load_config_file

if options.debug
  puts "DEBUG: config array:"
  pp config
end


################################################################################
#
# option list:
#

if options.list
  rows = []

  config[:websites].each do |site|
    rows << [site[:label],site[:url],site[:site_host]] 
  end

  puts Terminal::Table.new :title => "Website list", :headings => ['Label', 'URL','Server'], :rows => rows

end

################################################################################
#
# option backups:
#

if options.backups

  # The backup dir
  backup_dir = config[:backup][:storage]
  pp "DEBUG: backupdir = #{backup_dir}" if options.debug

  # Get all the sites:
  backup_tags = Dir[File.join(backup_dir,'*')].map { |site| Dir[File.join(site,'*')]}.flatten
  pp "DEBUG: backuptags = #{backup_tags}" if options.debug

  rows = []
  backup_tags.each do |backup|

    bkp_info = YAML::load File.open(File.join(backup,'metadata.yaml')) {|f| f.read}
   
    if bkp_info[:label] =~ /#{options.label}/
      rows << [
        bkp_info[:tag],
        bkp_info[:label],
        bkp_info[:url],
        bkp_info[:description],
        bkp_info[:date],
      ] 

    end

  end

  puts Terminal::Table.new :title => "Backup list", :headings => ['Tag #','Label', 'URL','Description','Date'], :rows => rows

exit


  rows = []

  config[:websites].each do |site|
    rows << [site[:label],site[:url],site[:site_host]] 
  end

  puts Terminal::Table.new :title => "Website list", :headings => ['Label', 'URL','Server'], :rows => rows

end

exit
################################################################################
#
# Get configuration for websites:
#

src = config[:websites].find { |site| src == site[:label] }
dst = config[:websites].find { |site| dst == site[:label] }

if options.debug
  puts "DEBUG src config:"
  pp src
  puts "DEBUG dst config:"
  pp dst
end

if src.nil?
  $stderr.puts "wsync error: Could not find SRC in config file".red
  exit 1
end

if dst.nil?
  $stderr.puts "wsync error: Could not find DST in config file".red
  exit 1
end


################################################################################
#
# Verify I can actually move the site
#

[src[:mysql_host],dst[:mysql_host],src[:site_host],dst[:site_host]].uniq.each do |site| 
  myexec "ssh #{site} hostname", {:stderr => options.debug, :stdout => options.verbose, :exit_on_error => true, :timeout => EXEC_TIMEOUT}
end

cache_dir = config[:settings][:cache_dir]
test_file = File.join(cache_dir,'.test')

puts "DEBUG: Cache dir is: #{cache_dir}" if options.debug

# Test cache_dir
begin
  FileUtils.mkdir_p(cache_dir) if not File.exists?(cache_dir)
  FileUtils.touch(test_file) 
  FileUtils.rm(test_file) 
rescue => e
  puts "wsync error: Something wrong happened when trying to use #{cache_dir}"
  puts "Error was: #{e}"
  exit 1
end

################################################################################
#
# Build the scripts to move the site:
#


################################################
# Move files:

# Move files cmd:

case options.transfer_type
when :rsync
  # Variables:
  mf_cmd = "/usr/bin/rsync"
  mf_flags = "--archive --delete --verbose"
  mf_src_host = src[:site_host]
  mf_src_path = src[:site_path]
  mf_dst_host = dst[:site_host]
  mf_dst_path = dst[:site_path]
  mf_cache_dir = File.join(cache_dir,src[:url])

  # Commands to excecute
  mf_exec_a = "#{mf_cmd} #{mf_flags} #{mf_src_host}:#{mf_src_path}/ #{mf_cache_dir}"
  mf_exec_b = "#{mf_cmd} #{mf_flags} #{mf_cache_dir}/ #{mf_dst_host}:#{mf_dst_path}"

  # debug;
  puts "DEBUG: #{mf_exec_a}" if options.debug
  puts "DEBUG: #{mf_exec_b}" if options.debug

  # Excecute commands:
  print "Syncing website files: " if not options.quiet
  myexec mf_exec_a, {:stderr => options.debug, :stdout => options.verbose, :exit_on_error => true, :timeout => EXEC_TIMEOUT }
  myexec mf_exec_b, {:stderr => options.debug, :stdout => options.verbose, :exit_on_error => true, :timeout => EXEC_TIMEOUT }
  print "OK\n".green if not options.quiet and not options.verbose
when :ftp
  puts "wsync error: transfer type method not supported yet".red
end

################################################
# Move DB:

if not options.skipdb

  # variables
  cdb_src_host = src[:mysql_host]
  cdb_dst_host = dst[:mysql_host]
  cdb_drop_db_sql = "/usr/bin/mysql -e \"DROP DATABASE #{dst[:mysql_db]};\""
  cdb_create_db_sql = "/usr/bin/mysql -e \"CREATE DATABASE #{dst[:mysql_db]};\""
  cdb_dump_db_cmd = "/usr/bin/mysqldump #{src[:mysql_db]}"
  cdb_import_db_cmd = "/usr/bin/mysql #{dst[:mysql_db]}"

  # Commands to execute
  cdb_exec_a = "ssh #{cdb_dst_host} '#{cdb_drop_db_sql}'"
  cdb_exec_b = "ssh #{cdb_dst_host} '#{cdb_create_db_sql}'"
  cdb_exec_c = "ssh #{cdb_src_host} #{cdb_dump_db_cmd}|ssh #{cdb_dst_host} #{cdb_import_db_cmd}"

  # debug
  if options.debug
    puts "DEBUG: "
    puts cdb_exec_a
    puts cdb_exec_b
    puts cdb_exec_c
  end

  # Execute commands:
  print "Syncing database: " if not options.quiet
  myexec cdb_exec_a, {:stderr => options.debug, :stdout => options.verbose, :exit_on_error => true, :timeout => EXEC_TIMEOUT }
  myexec cdb_exec_b, {:stderr => options.debug, :stdout => options.verbose, :exit_on_error => true, :timeout => EXEC_TIMEOUT }
  myexec cdb_exec_c, {:stderr => options.debug, :stdout => options.verbose, :exit_on_error => true, :timeout => EXEC_TIMEOUT }
  print "OK\n".green if not options.quiet and not options.verbose

end

################################################
# Execute remote commands:

if not dst[:exec_remote].to_s.empty?
  print "Running remote command: " if not options.quiet
  puts "DEBUG: Executing #{dst[:exec_remote]} on #{dst[:site_host]}" if options.debug
  cmd = "ssh #{dst[:site_host]} '#{dst[:exec_remote]}'"
  myexec cmd, {:stderr => options.debug, :stdout => options.verbose, :exit_on_error => false, :timeout => EXEC_TIMEOUT}
  print "OK\n".green if not options.quiet and not options.verbose
end
