#!/usr/bin/env ruby

require 'rubygems'
require 'open3'
require 'optparse'
require 'ostruct'
require 'colorize'
require 'fileutils'
require 'yaml'
require 'timeout'
require 'pp'
# If this is a symlink, go and get the working directory through it:

root_dir = File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__

require_relative File.join(root_dir,'..','..','lib','functions.rb')

################################################################################
#
# Global Variables
#
EXEC_TIMEOUT = 600

################################################################################
#
# Command parser configuration
#

class OptparseWsync

  # Return a structure describing the options.
  #
  def self.parse(args)
    # The options specified on the command line will be collected in *options*.
    # We set default values here.
    options = OpenStruct.new
    options.all = true
    options.exclude = []
    options.verbose = false
    options.debug = false
    options.transfer_type = :rsync
    options.skipdb = false
    options.skipfiles = false
    options.use_sudo = false
    options.delete = false

    opt_parser = OptionParser.new do |opts|

      opts.banner = "Usage: #{$0} [options] src dst"

      opts.separator ""
      opts.separator "Specific options:"

      # Mandatory argument.
      opts.on("-a", "--all", "Sync files and DB") do 
        options.all = true
      end

      #verbose
      opts.on("-v", "--verbose", "Verbose output") do
        options.verbose = true
      end

      #verbose
      opts.on("-q", "--quiet", "Run quiet mode") do
        options.quiet = true
      end

      # Debug the script
      opts.on("-d", "--debug", "Debug the script internals") do
        options.debug = true
      end

      # sync db
      opts.on("-s", "--skipdb", "Do not sync database") do
        options.skipdb = true
      end

      # sync db
      opts.on("-f", "--skipfiles", "Do not sync files") do
        options.skipfiles = true
      end

      # Sudo
      opts.on("-S", "--use_sudo", "Use sudo on remote host to transfer files") do
        options.use_sudo = true
      end

      # rsync delete option
      opts.on("-D", "--delete", "Use delete on remote host to transfer files") do
        options.delete = true
      end
      
      # exclude files
      opts.on("-x", "--exclude=PATTERN","Specify PATTERN of files to be excluded") do |x|
        options.exclude << x 
      end

      # What to use to copy the site
      opts.on("--transfer_type [TYPE]", [:rsync, :ftp],"Select transfer type (*rsync, ftp)") do |t|
        options.transfer_type = t
      end

      opts.separator ""
      opts.separator "Common options:"

      # No argument, shows at tail.  This will print an options summary.
      # Try it and see!
      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end

      # Another typical switch to print the version.
      opts.on_tail("--version", "Show version") do
        puts OptionParser::Version.join('.')
        exit
      end


    end


    opt_parser.parse!(args)

    if args.size != 2
      puts opt_parser
      exit
    end

    options
  end  # parse()

end  # class OptparseExample


################################################################################
#
# Parse options and verify src and dst
#

begin
  options = OptparseWsync.parse(ARGV)
rescue => e
  puts "wsync error: #{e}".red
  exit 1
end

if ARGV.size != 2
  $stderr.puts "wsync error: syntax or usage error, src and dst host not correctly specified".red
  exit 1
end

src = ARGV.shift
dst = ARGV.shift

if options.debug 
  puts "DEBUG: src = #{src}"
  puts "DEBUG: dst = #{dst}"
end

################################################################################
#
# Load configuration file
#

config = load_config_file

if options.debug
  puts "DEBUG: config array:"
  pp config
end

################################################################################
#
# Get configuration for websites:
#

src = config[:websites].find { |site| src == site[:label] }
dst = config[:websites].find { |site| dst == site[:label] }

if options.debug
  puts "DEBUG src config:"
  pp src
  puts "DEBUG dst config:"
  pp dst
end

if src.nil?
  $stderr.puts "wsync error: Could not find SRC in config file".red
  exit 1
end

if dst.nil?
  $stderr.puts "wsync error: Could not find DST in config file".red
  exit 1
end


################################################################################
#
# Verify I can actually move the site
#

[src[:mysql_host],dst[:mysql_host],src[:site_host],dst[:site_host]].uniq.each do |site| 
  myexec "ssh #{config[:user]}@#{site} hostname", 
    {
      :stderr => options.debug, 
      :stdout => false, 
      :exit_on_error => true, 
      :timeout => 5, 
      :retry => 2
    }
end

cache_dir = config[:settings][:cache_dir]
test_file = File.join(cache_dir,'.test')

puts "DEBUG: Cache dir is: #{cache_dir}" if options.debug

# Test cache_dir
begin
  FileUtils.mkdir_p(cache_dir) if not File.exists?(cache_dir)
  FileUtils.touch(test_file) 
  FileUtils.rm(test_file) 
rescue => e
  puts "wsync error: Something wrong happened when trying to use #{cache_dir}"
  puts "Error was: #{e}"
  exit 1
end

################################################################################
#
# Build the scripts to move the site:
#


################################################
# Move files:

# Move files cmd:
if not options.skipfiles

  case options.transfer_type
  when :rsync
    # Variables:
    mf_cmd = "/usr/bin/rsync"
    mf_flags = "--archive --verbose "
    mf_flags += "--delete " if options.delete
    mf_flags += "--rsync-path=\"sudo rsync\" " if options.use_sudo
    mf_src_host = src[:site_host]
    mf_src_path = src[:site_path]
    mf_dst_host = dst[:site_host]
    mf_dst_path = dst[:site_path]
    mf_cache_dir = File.join(cache_dir,src[:url])

    # Commands to excecute
    mf_exec_a = "#{mf_cmd} #{mf_flags} #{config[:user]}@#{mf_src_host}:#{mf_src_path}/ #{mf_cache_dir}"
    mf_exec_b = "#{mf_cmd} #{mf_flags} #{mf_cache_dir}/ #{config[:user]}@#{mf_dst_host}:#{mf_dst_path}"

    # debug;
    puts "DEBUG: #{mf_exec_a}" if options.debug
    puts "DEBUG: #{mf_exec_b}" if options.debug

    # Excecute commands:
    print "Syncing website files: " if not options.quiet
    myexec mf_exec_a, {:stderr => true, :stdout => false, :exit_on_error => true, :timeout => EXEC_TIMEOUT }
    myexec mf_exec_b, {:stderr => true, :stdout => options.verbose, :exit_on_error => true, :timeout => EXEC_TIMEOUT }
    print "OK\n".green if not options.quiet and not options.verbose
  when :ftp
    puts "wsync error: transfer type method not supported yet".red
  end

end

################################################
# Move DB:

if not options.skipdb

  # variables
  cdb_src_host = src[:mysql_host]
  cdb_dst_host = dst[:mysql_host]
  cdb_drop_db_sql = "/usr/bin/mysql -u#{dst[:mysql_user]} -p#{dst[:mysql_pass]} -e \"DROP DATABASE #{dst[:mysql_db]};\""
  cdb_create_db_sql = "/usr/bin/mysql -u#{dst[:mysql_user]} -p#{dst[:mysql_pass]} -e \"CREATE DATABASE #{dst[:mysql_db]};\""
  cdb_dump_db_cmd = "/usr/bin/mysqldump  -u#{src[:mysql_user]} -p#{src[:mysql_pass]}  #{src[:mysql_db]}"
  cdb_import_db_cmd = "/usr/bin/mysql -u#{dst[:mysql_user]} -p#{dst[:mysql_pass]} #{dst[:mysql_db]}"

  # Commands to execute
  cdb_exec_a = "ssh #{config[:user]}@#{cdb_dst_host} '#{cdb_drop_db_sql}'"
  cdb_exec_b = "ssh #{config[:user]}@#{cdb_dst_host} '#{cdb_create_db_sql}'"
  cdb_exec_c = "ssh #{config[:user]}@#{cdb_src_host} '#{cdb_dump_db_cmd}' > /tmp/dumpdb.sql"
  cdb_exec_d = "ssh #{config[:user]}@#{cdb_dst_host} '#{cdb_import_db_cmd}' < /tmp/dumpdb.sql"

  # debug
  if options.debug
    puts "DEBUG: "
    puts cdb_exec_a
    puts cdb_exec_b
    puts cdb_exec_c
    puts cdb_exec_d
  end

  # Execute commands:
  print "Syncing database: " if not options.quiet
  myexec cdb_exec_a, {:stderr => true, :stdout => options.verbose, :exit_on_error => true, :timeout => EXEC_TIMEOUT }
  myexec cdb_exec_b, {:stderr => true, :stdout => options.verbose, :exit_on_error => true, :timeout => EXEC_TIMEOUT }
  myexec cdb_exec_c, {:stderr => true, :stdout => options.verbose, :exit_on_error => true, :timeout => EXEC_TIMEOUT }
  myexec cdb_exec_d, {:stderr => true, :stdout => options.verbose, :exit_on_error => true, :timeout => EXEC_TIMEOUT }
  print "OK\n".green if not options.quiet or not options.verbose

end
